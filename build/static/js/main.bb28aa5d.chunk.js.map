{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","e","preventDefault","prompt","add","key","fontSize","Avatar","src","photo","signOut","displayName","uid","substring","ChatHeader","type","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","console","log","disabled","value","onChange","target","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","catch","err","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb28aa5d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n    name: 'app',\n    initialState: {\n        channelId: null,\n        channelName: null\n    },\n    reducers: {\n        setChannelInfo: (state, action) => {\n            state.channelId = action.payload.channelId\n            state.channelName = action.payload.channelName\n        }\n    },\n});\n\nexport const { setChannelInfo } = appSlice.actions;\n\nexport const selectChannelId = (state) => state.app.channelId;\nexport const selectChannelName = (state) => state.app.channelName;\n\nexport default appSlice.reducer;\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setChannelInfo } from './features/appSlice'\nimport './SidebarChannel.css'\n\nconst SidebarChannel = ({ id, channelName }) => {\n    const dispatch = useDispatch()\n    return (\n        <div className='sidebarChannel' onClick={() => dispatch(setChannelInfo({\n            channelId: id,\n            channelName: channelName\n        }))} >\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\n        </div>\n    )\n}\n\nexport default SidebarChannel\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = state => state.user.user;\n\nexport default userSlice.reducer;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBp6SBt0j4-GWQTozwoTrwu7J-4t1FEjGs',\n  authDomain: 'discord-clone-81765.firebaseapp.com',\n  databaseURL: 'https://discord-clone-81765.firebaseio.com',\n  projectId: 'discord-clone-81765',\n  storageBucket: 'discord-clone-81765.appspot.com',\n  messagingSenderId: '486175970089',\n  appId: '1:486175970089:web:78580d739ac82c2ab69d38',\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nexport { auth, provider };\nexport default db;\n","import React from 'react'\nimport './Sidebar.css'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport SidebarChannel from './SidebarChannel'\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport CallIcon from '@material-ui/icons/Call'\nimport { Avatar } from '@material-ui/core'\nimport MicIcon from '@material-ui/icons/Mic'\nimport HeadsetIcon from '@material-ui/icons/Headset'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\nimport db, { auth } from './firebase'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\n\nconst Sidebar = () => {\n    const user = useSelector(selectUser)\n    const [channels, setChannels] = useState([])\n\n    useEffect(() => {\n        db.collection('channels').onSnapshot(snapshot => {\n            setChannels(snapshot.docs.map(doc => ({\n                id: doc.id,\n                channel: doc.data()\n            })))\n        })\n    }, [])\n\n    const handleAddChannel = (e) => {\n        e.preventDefault()\n\n        const channelName = prompt('Enter a new channel name')\n\n        if (channelName) {\n            db.collection('channels').add({\n                channelName: channelName\n            })\n\n        }\n    }\n\n    return (\n        <div className='sidebar' >\n            <div className=\"sidebar__top\">\n                <h3>ShiroWorks</h3>\n                <ExpandMoreIcon />\n            </div>\n\n            <div className=\"sidebar__channels\">\n                <div className=\"sidebar__channelsHeader\">\n                    <div className=\"sidebar__header\">\n                        <ExpandMoreIcon />\n                        <h4>Text Channels</h4>\n                    </div>\n\n                    <AddIcon onClick={handleAddChannel} className='sidebar__addChannel' />\n                </div>\n                <div className=\"sidebar__channelsList\">\n                    {\n                        channels.map(({ id, channel }) => (\n                            <SidebarChannel key={id} id={id} channelName={channel.channelName} />\n                        ))\n                    }\n                </div>\n            </div>\n\n            <div className=\"sidebar__voice\">\n                <SignalCellularAltIcon className='sidebar__voiceIcons' fontSize='large' />\n                <div className=\"sidebar__voiceInfo\">\n                    <h3>Voice Connected</h3>\n                    <p>Stream</p>\n                </div>\n\n                <div className=\"sidebar__voiceIcons\">\n                    <InfoOutlinedIcon />\n                    <CallIcon />\n                </div>\n            </div>\n            <div className=\"sidebar__profile\">\n                <Avatar src={user.photo} onClick={() => auth.signOut()} />\n                <div className=\"sidebar__profileInfo\">\n                    <h3>{user.displayName}</h3>\n                    <p>#{user.uid.substring(0, 5)}</p>\n                </div>\n\n                <div className=\"sidebar__profileIcons\">\n                    <MicIcon />\n                    <HeadsetIcon />\n                    <SettingsIcon />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './ChatHeader.css'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport EditLocationRounded from '@material-ui/icons/EditLocationRounded'\nimport PeopleAltRounded from '@material-ui/icons/PeopleAltRounded'\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded'\nimport SendRoundedIcon from '@material-ui/icons/SendRounded'\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded'\n\nconst ChatHeader = ({ channelName }) => {\n    return (\n        <div className='chatHeader' >\n            <div className=\"chatHeader__left\">\n                <h3><span className=\"chatHeader__hash\">#</span>\n                    {channelName}\n                    </h3>\n            </div>\n\n            <div className=\"chatHeader__right\">\n                <NotificationsIcon />\n                <EditLocationRounded />\n                <PeopleAltRounded />\n\n                <div className=\"chatHeader__search\">\n                    <input type=\"text\" placeholder='Search' />\n                    <SearchRoundedIcon />\n                </div>\n\n                <SendRoundedIcon />\n                <HelpRoundedIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport './Message.css'\n\nconst Message = ({ timestamp, user, message }) => {\n// const Message = ({ message }) => {\n\n    // console.log(message)\n\n    return (\n        <div className='message' >\n            <Avatar src={user.photo} />\n            <div className=\"message__info\">\n                <h4>{user.displayName}\n                    <span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toUTCString()}</span>\n                </h4>\n\n                <p>{message}</p> \n        </div>\n        </div >\n    )\n}\n\nexport default Message\n","import React from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions'\nimport Message from './Message'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\nimport { selectChannelId, selectChannelName } from './features/appSlice'\nimport { useState } from 'react'\nimport { useEffect } from 'react'\nimport db from './firebase'\nimport firebase from 'firebase'\n\nconst Chat = () => {\n    const user = useSelector(selectUser)\n    const channelId = useSelector(selectChannelId)\n    const channelName = useSelector(selectChannelName)\n    const [input, setInput] = useState('')\n    const [messages, setMessages] = useState([])\n\n    useEffect(() => {\n        if (channelId) {\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n                setMessages(snapshot.docs.map(doc => doc.data()))\n            })\n        }\n\n\n    }, [channelId])\n\n    const sendMessage = (e) => {\n        e.preventDefault()\n\n        db.collection('channels').doc(channelId).collection('messages').add({\n            message: input,\n            user: user,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n\n        setInput('')\n    }\n\n    return (\n        <div className='chat' >\n            <ChatHeader channelName={channelName} />\n\n            <div className=\"chat__messages\">\n                {messages.map((message) => {\n                    console.log(message)\n                })}\n                {messages.map(message => (\n                    <Message message={message.message} timestamp={message.timestamp} user={message.user} />\n                ))}\n            </div>\n\n            <div className=\"chat__input\">\n                <AddCircleIcon fontSize='large' />\n                <form>\n                    <input type=\"text\" disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\n                    <button className='chat__inputButton' onClick={sendMessage} disabled={!channelId} type='submit'></button>\n                </form>\n\n                <div className=\"chat__inputIcon\">\n                    <CradGiftcardIcon fontSize='large' />\n                    <GifIcon fontSize='large' />\n                    <EmojiEmoticonsIcon fontSize='large' />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import { Button } from '@material-ui/core'\nimport React from 'react'\nimport './Login.css'\nimport { auth, provider } from './firebase'\n\nconst Login = () => {\n    const signIn = () => {\n        // clever google login\n\n        auth.signInWithPopup(provider).catch((err) => alert(err.message))\n    }\n    return (\n        <div className='login' >\n            <div className=\"login__logo\">\n                <img src=\"https://www.freepnglogos.com/uploads/discord-logo-png/discord-logo-logodownload-download-logotipos-1.png\" alt=\"discord logo\" />\n            </div>\n\n            <Button onClick={signIn}>Sign In</Button>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport Chat from './Chat';\nimport { selectUser } from './features/userSlice';\nimport { useDispatch, useSelector } from 'react-redux'\nimport Login from './Login';\nimport { useEffect } from 'react';\nimport { auth } from './firebase';\nimport { login, logout } from './features/userSlice'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const user = useSelector(selectUser)\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n\n      console.log(authUser)\n\n      if (authUser) {\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName\n        }))\n      } else {\n        dispatch(logout())\n      }\n    })\n  }, [dispatch])\n\n  console.log(user)\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n\n      ) : (\n          <Login />\n        )}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice'\nimport appReducer from '../features/appSlice'\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}